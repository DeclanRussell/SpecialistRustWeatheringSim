#ifndef NGLSCENE_H__
#define NGLSCENE_H__
#include <ngl/Camera.h>
#include <ngl/Colour.h>
#include <ngl/Light.h>
#include <ngl/TransformStack.h>
#include <ngl/Text.h>
#include <QTime>
#include <QGLWidget>
#include <QEvent>
#include <QResizeEvent>
#include <QMessageBox>
//----------------------------------------------------------------------------------------------------------------------
/// @file NGLScene.h
/// @brief this class inherits from the Qt OpenGLWindow and allows us to use NGL to draw OpenGL
/// @author Jonathan Macey
/// @version 1.0
/// @date 10/9/13
/// Revision History :
/// This is an initial version used for the new NGL6 / Qt 5 demos
/// @class NGLScene
/// @brief our main glwindow widget for NGL applications all drawing elements are
/// put in this file
//----------------------------------------------------------------------------------------------------------------------

class NGLScene : public QGLWidget
{
    Q_OBJECT //must include to gain access to qt stuff

  public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief ctor for our NGL drawing class
    /// @param [in] parent the parent window to the class
    //----------------------------------------------------------------------------------------------------------------------
    NGLScene(const QGLFormat _format,QWidget *_parent );
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief dtor must close down ngl and release OpenGL resources
    //----------------------------------------------------------------------------------------------------------------------
    ~NGLScene();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the initialize class is called once when the window is created and we have a valid GL context
    /// use this to setup any default GL stuff
    //----------------------------------------------------------------------------------------------------------------------
    void initializeGL();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this is called everytime we want to draw the scene
    //----------------------------------------------------------------------------------------------------------------------
    void paintGL();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief create a VBO of a loaded in mesh and store in a vao m_vaoID
    //----------------------------------------------------------------------------------------------------------------------
    void loadMesh( GLfloat _scale, std::string _location );
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief load the base texture for our mesh and attach to m_textureName and creates a texture to hold our rust locations
    //----------------------------------------------------------------------------------------------------------------------
    void loadBaseTexture(std::string filePath);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Our Random deposition model to update our rust
    //----------------------------------------------------------------------------------------------------------------------
    void randomDepModel();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Our Random deposition variation model to update our rust
    //----------------------------------------------------------------------------------------------------------------------
    void randomDepVariationModel();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Our Ballistic deposition model to update our rust
    //----------------------------------------------------------------------------------------------------------------------
    void ballisticDepModel();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief clears our rust information so we are back to viewing our base texture
    //----------------------------------------------------------------------------------------------------------------------
    void clearRust();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief toggle playing our simulation
    //----------------------------------------------------------------------------------------------------------------------
    void togglePlay();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief toggle updating with our Random Deposition model
    //----------------------------------------------------------------------------------------------------------------------
    void toggleRandDepModel();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief toggle updating with our Random Deposition Variation model
    //----------------------------------------------------------------------------------------------------------------------
    void toggleRandDepVarModel();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief toggle updating with our Random Deposition model
    //----------------------------------------------------------------------------------------------------------------------
    void toggleBallisticModel();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief toggles viewing our mesh in wireframe view
    //----------------------------------------------------------------------------------------------------------------------
    void toggleWireFrameView();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a mutator for our m_numBDParticles
    //----------------------------------------------------------------------------------------------------------------------
    inline void setNumBDParticles(int _numParticles){m_numBDParticles = _numParticles;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a mutator for our m_numBDParticles
    //----------------------------------------------------------------------------------------------------------------------
    inline void setNumRDParticles(int _numParticles){m_numRDParticles = _numParticles;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a mutator for our m_numBDParticles
    //----------------------------------------------------------------------------------------------------------------------
    inline void setNumRDVParticles(int _numParticles){m_numRDVParticles = _numParticles;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a mutator for the start colour of our rust
    //----------------------------------------------------------------------------------------------------------------------
    void setRustStartColour(float _r, float _g, float _b);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a mutator for the end colour of our rust
    //----------------------------------------------------------------------------------------------------------------------
    void setRustEndColour(float _r, float _g, float _b);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a enumerator of DPD types
    //----------------------------------------------------------------------------------------------------------------------
    enum DPDType {Random,Seed};
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a member to store what type of DPD model we wish to use
    //----------------------------------------------------------------------------------------------------------------------
    DPDType m_CurrentDPDType;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a mutator to chance our DPD type
    //----------------------------------------------------------------------------------------------------------------------
    inline void setDPDType(DPDType _type){m_CurrentDPDType = _type;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Our Directed percolation depinning model to update our rust. This vertion simply fires random particles at
    /// @brief the texture and then updates the rust in accodance with the lattice probability of that location
    /// @warning This must be initialized first and requires a texture to be loaded
    //----------------------------------------------------------------------------------------------------------------------
    void DPDModelRandom();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Our Directed percolation depinning model to update our rust. This vertion fires particles at seeded locations
    /// @brief and then diffused about the texture then updates the rust in accodance with the lattice probability of that location
    /// @warning This must be initialized first and requires a texture to be loaded
    //----------------------------------------------------------------------------------------------------------------------
    void DPDModelSeed();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Our Directed percolation depinning model to update our rust
    //----------------------------------------------------------------------------------------------------------------------
    void DPDModelInit();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Our Directed percolation depinning model to update our rust
    //----------------------------------------------------------------------------------------------------------------------
    void genRandomDPDTexture(float _density = 0.5);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief A mutator to change the number of particles used in our DPD particle model
    //----------------------------------------------------------------------------------------------------------------------
    inline void setNumDPDParticles(int _numParticles){m_numDPDParticles = _numParticles;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a function to toggle drawing our DPD lattice texture
    //----------------------------------------------------------------------------------------------------------------------
    void toggleDrawLattice(bool _toggle);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a function to toggle updating with our DPD model
    //----------------------------------------------------------------------------------------------------------------------
    inline void toggleDPDUpdate(bool _toggle){m_DPDModelUpdate = _toggle;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a mutator to set the probability of increasing our blocked probability in our DPD model
    //----------------------------------------------------------------------------------------------------------------------
    inline void setDPDProb(int _prob){m_DPDBlockedPickedProb = _prob;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief toggle if we want to take prob value from lattice texture or from user defined
    //----------------------------------------------------------------------------------------------------------------------
    inline void setDPDFromPixel(bool _fromPixel){m_DPDTakeProbFromPixel = _fromPixel;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief mutator for how many seeds in our DPD model
    //----------------------------------------------------------------------------------------------------------------------
    inline void setDPDNumSeeds(int _numSeeds){m_numDPDSeeds = _numSeeds;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a function to generate a number of seeds for our DPD model depending on how many m_numDPDSeeds we have
    //----------------------------------------------------------------------------------------------------------------------
    void genDPDSeeds();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief sets our noise texture to be our lattice texture
    //----------------------------------------------------------------------------------------------------------------------
    void enableLatticeNoise();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief sets our loaded texture to be our lattice texture
    //----------------------------------------------------------------------------------------------------------------------
    void enableLatticeFile();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief loads in a new texture from file
    //----------------------------------------------------------------------------------------------------------------------
    void loadNewLatticeFile(QImage _newImage);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief will return a set of closest neighbours to a point that have a value less than 255
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<ngl::Vec2> findClosestNonFullNeighbours(int _x, int _y);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a simple linear interpolation function
    //----------------------------------------------------------------------------------------------------------------------
    inline float lerp(float _x, float _y, float _a){return  _x*(1-_a) + _y*_a;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The following function is from Perlin Noise gernation by Hugo Elias http://freespace.virgin.net/hugo.elias/models/m_perlin.htm
    /// @brief a functioin to calculate the perlin noise at a set point
    //----------------------------------------------------------------------------------------------------------------------
    float PerlinNoise(int _x, int _y, float _size = 16.0, float _offset = 0, int _octaves = 8);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The following function is from Perlin Noise gernation by Hugo Elias http://freespace.virgin.net/hugo.elias/models/m_perlin.htm
    /// @brief a function to interpolate noise
    //----------------------------------------------------------------------------------------------------------------------
    float interpolatedNoise(float _x, float _y);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The following function is from Perlin Noise gernation by Hugo Elias http://freespace.virgin.net/hugo.elias/models/m_perlin.htm
    /// @brief a function to smooth noise
    //----------------------------------------------------------------------------------------------------------------------
    float smoothNoise(float _x, float _y);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The following function is from Perlin Noise gernation by Hugo Elias http://freespace.virgin.net/hugo.elias/models/m_perlin.htm
    /// @brief a funtion to generate random noise
    //----------------------------------------------------------------------------------------------------------------------
    float Noise(int _x, int _y);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a function to generate Perlin noise for every pixel
    //----------------------------------------------------------------------------------------------------------------------
    void genPerlinNoise(float _size = 16.0, float _offset = 0, int _octaves = 8);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a function to save our final generated rust texture
    //----------------------------------------------------------------------------------------------------------------------
    void saveFinalRustImage(QString _target);
    //----------------------------------------------------------------------------------------------------------------------


private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a member to store our rust start colour;
    //----------------------------------------------------------------------------------------------------------------------
    QColor m_rustStartColour;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a member to store our rust end colour;
    //----------------------------------------------------------------------------------------------------------------------
    QColor m_rustEndColour;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief A member so we know weather to take the probability of increasing a blocked pixel from the value in the lattice texture
    //----------------------------------------------------------------------------------------------------------------------
    bool m_DPDTakeProbFromPixel;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief A member to hold the probability of increasing a blocked pixel
    //----------------------------------------------------------------------------------------------------------------------
    float m_DPDBlockedPickedProb;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Our randomly generated seeds for our Directed percolation depinning model
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<ngl::Vec2> m_DPDSeeds;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the number of seeds to generate in our Directed percolation depinning model
    //----------------------------------------------------------------------------------------------------------------------
    int m_numDPDSeeds;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief an int to store how many particles to use every update of the Directed percolation depinning model
    //----------------------------------------------------------------------------------------------------------------------
    int m_numDPDParticles;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief an int to store how many particles to use every update of the Random Deposition variation model
    //----------------------------------------------------------------------------------------------------------------------
    int m_numRDVParticles;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief an int to store how many particles to use every update of the Random Deposition model
    //----------------------------------------------------------------------------------------------------------------------
    int m_numRDParticles;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief an int to store how many particles to use every update of the Ballistic Deposition model
    //----------------------------------------------------------------------------------------------------------------------
    int m_numBDParticles;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a boolian to toggle update with the random deposition model;
    //----------------------------------------------------------------------------------------------------------------------
    bool m_BallisticDepModel;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a boolian to toggle update with the random deposition variation model;
    //----------------------------------------------------------------------------------------------------------------------
    bool m_randomDepVarModel;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a boolian to toggle update with the random deposition model;
    //----------------------------------------------------------------------------------------------------------------------
    bool m_randomDepositionModel;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a boolian to toggle update with the directed percolation depinning model;
    //----------------------------------------------------------------------------------------------------------------------
    bool m_DPDModelUpdate;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a boolian to toggle playing the simulation
    //----------------------------------------------------------------------------------------------------------------------
    bool m_play;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a function to search the surrounding levels of neighbours to a pixel and return the maximum value held
    //----------------------------------------------------------------------------------------------------------------------
    int maxNeighbouringHeight(int levelsOfSearch, int sampleX, int sampleY);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a function to search the surrounding levels of neighbours to a pixel and return the maximum value held
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec2 lowestNeighbouringPosition(int levelsOfSearch, int sampleX, int sampleY);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief an image to store our base texture
    //----------------------------------------------------------------------------------------------------------------------
    QImage m_baseTexture;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief an image used to store all our rust location data
    //----------------------------------------------------------------------------------------------------------------------
    QImage m_rustData;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief an image to store our Directed Percolation Deppining lattice texture that we have generated from random noise
    //----------------------------------------------------------------------------------------------------------------------
    QImage m_DPDLatticeNoise;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief an image to store our Directed Percolation Deppining lattice texture loaded from a file
    //----------------------------------------------------------------------------------------------------------------------
    QImage m_DPDLatticeFromFile;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief an image used to store all Directed percolation deppining lattice data
    //----------------------------------------------------------------------------------------------------------------------
    QImage m_DPDLatticeData;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief used to store the x rotation mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_spinXFace;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief used to store the y rotation mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_spinYFace;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag to indicate if the mouse button is pressed when dragging
    //----------------------------------------------------------------------------------------------------------------------
    bool m_rotate;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag to indicate if the Right mouse button is pressed when dragging
    //----------------------------------------------------------------------------------------------------------------------
    bool m_translate;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous x mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_origX;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous y mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_origY;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous x mouse value for Position changes
    //----------------------------------------------------------------------------------------------------------------------
    int m_origXPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous y mouse value for Position changes
    //----------------------------------------------------------------------------------------------------------------------
    int m_origYPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief used to store the global mouse transforms
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Mat4 m_mouseGlobalTX;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Our Camera
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Camera *m_cam;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief transformation stack for the gl transformations etc
    //----------------------------------------------------------------------------------------------------------------------
    ngl::TransformStack m_transformStack;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the model position for mouse movement
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_modelPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method to load transform matrices to the shader
    //----------------------------------------------------------------------------------------------------------------------
    void loadMatricesToShader();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this is called whenever the window is re-sized
    /// @param[in] _w the width of the resized window
    /// @param[in] _h the height of the resized window
    //----------------------------------------------------------------------------------------------------------------------
    void resizeGL(const int _w, const int _h );
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Qt Event called when a key is pressed
    /// @param [in] _event the Qt event to query for size etc
    //----------------------------------------------------------------------------------------------------------------------
    void keyPressEvent(QKeyEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called every time a mouse is moved
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void mouseMoveEvent (QMouseEvent * _event );
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse button is pressed
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void mousePressEvent ( QMouseEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse button is released
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void mouseReleaseEvent ( QMouseEvent *_event );

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse wheel is moved
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void wheelEvent( QWheelEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief timer event used for the fps counter
    //----------------------------------------------------------------------------------------------------------------------
    void timerEvent(QTimerEvent *);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief ID for the cube VAO
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_vaoID;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief opengl texture id for the crate texture
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_texId[3];
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our font / text
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Text *m_text;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our font / text
    //----------------------------------------------------------------------------------------------------------------------
    GLenum m_polyMode;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag for the fps timer
    //----------------------------------------------------------------------------------------------------------------------
    int m_fpsTimer;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the fps to draw
    //----------------------------------------------------------------------------------------------------------------------
    int m_fps;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief frame counter
    //----------------------------------------------------------------------------------------------------------------------
    int m_frames;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief timer used for FPS counting
    //----------------------------------------------------------------------------------------------------------------------
    QTime m_timer;

};



#endif
